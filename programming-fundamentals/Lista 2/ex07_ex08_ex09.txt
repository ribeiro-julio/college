7 - A função fseek tem como objetivo mover o fluxo de leitura ou escrita em um arquivo, ou seja, ela move o ponteiro que aponta para uma posição no arquivo. Ela requer 3 parâmetros: O ponteiro do arquivo; A quantidade de bytes a serem pulados; Uma referência que determina a partir de onde a movimentação irá começar (SEEK_SET -> Começo do arquivo; SEEK_CUR -> Posição atual do ponteiro; SEEK_END -> Final do arquivo). Ela retorna um inteiro 0 caso a movimentação seja bem sucedida. Esta função é mais fácil de ser utilizada em arquivos binários, pois, se sabemos o conteúdo do arquivo binário é mais fácil definirmos os "blocos" que compõem este arquivo, no caso, se tivermos um arquivo que armazena structs, podemos determinar a quantidade de bytes a serem puladas como o tamanho da struct, desta forma, a cada pulo estaremos lendo uma struct diferente.

8 - Para gravar dados de somente uma struct ambos as funções possuem as mesmas vantagens. Como iremos apenas guardar um dado, a função fprintf não iria precisa de uma estrutura de repetição na hora da gravação, pois irá gravar apenas um dado, dependendo apenas da formatação do tipo de escrita (um doa parâmetros da função fprintf). Já para se guardar um vetor de structs é mais vantajoso usar um arquivo binário por dois motivos: Não é necessário gerar uma estrutura de repetição na hora da gravação pois todos os dados contidos no vetor serão salvos de uma vez; É mais fácil capturar os dados na leitura, pois, todos os dados estarão posicionados como em um vetor, lado a lado, desta forma, precisamos apenas ler de tantos em tantos bytes (tamanho da struct) para pegarmos cada elemento do vetor que foi salvo no arquivo.

9 - Esquecer de fechar um arquivo pode gerar problemas como: Se abrimos diferentes arquivos durante a execução e não os fechamos, eventualmente iremos esgotar os "handlers" que fazem as operações nos arquivos, gerando problemas ao abrir mais arquivos; Perda de dados que seriam escritos no arquivo, pois, quando o programa é terminado, os buffers que seriam usados para escrever os dados no arquivo e que contem os dados digitados podem ser apagados sem serem adicionados ao arquivo (isso ocorre pois, quando o arquivo é fechado todos os buffers são finalizados e os dados são escritos no arquivo).
